{"version":3,"sources":["components/GameCard/index.js","components/Wrapper/index.js","components/Message/index.js","components/Navbar/index.js","components/Header/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","handleClick","id","alt","name","src","image","Wrapper","children","GameMessage","state","animating","message","renderMessage","_this","addAnimation","prevProps","console","log","newState","score","topScore","this","setState","_this2","concat","onAnimationEnd","Component","Navbar","Message","App","friends","show","shuffleDeck","sort","Math","random","resetDeck","resetFriends","map","item","Object","objectSpread","clicked","timeoutId","clearTimeout","correctPick","newData","newScore","newTopScore","max","wrongPick","setTimeout","bind","assertThisInitialized","gameCardClick","guessedCorrectly","components_Wrapper","components_Navbar","components_Header","friend","key","GameCard","ReactDOM","render","src_App","document","getElementById"],"mappings":"0vEAaeA,MAVf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,MAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,iBCA1BC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,WCkF1BC,0NAjFXC,MAAQ,CACJC,WAAW,EACXC,QAAS,MAiCbC,cAAgB,WACZ,OAAQC,EAAKJ,MAAME,SACnB,IAAK,UACH,MAAO,yBACT,IAAK,YACH,MAAO,2BACT,QACE,MAAO,kCAObG,aAAe,WACb,OAAQD,EAAKJ,MAAME,SACjB,IAAK,UACH,MAAO,iBACT,IAAK,YACH,MAAO,kBACT,QACE,MAAO,uFAlDMI,GACfC,QAAQC,IAAI,SAASF,GAGvB,IAAIG,EAAW,CACbR,WAAW,GAINS,EAAmBJ,EAAnBI,MAAOC,EAAYL,EAAZK,SAIZF,EAASP,QADG,IAAVQ,GAA4B,IAAbC,EACE,GACA,IAAVD,GAAeC,EAAW,EAChB,UAEA,YAKjBD,IAAUE,KAAK3B,MAAMyB,OAASE,KAAKZ,MAAME,UAAYO,EAASP,SAChEU,KAAKC,SAASJ,oCA+BT,IAAAK,EAAAF,KACL,OACE1B,EAAAC,EAAAC,cAAA,MAIEC,UAAS,gDAAA0B,OAELH,KAAKZ,MAAMC,UAAWW,KAAKP,eAAgB,GAFtC,sBAAAU,OAGLH,KAAKZ,MAAMC,UAAWW,KAAKZ,MAAME,QAAS,QAHrC,kBAKTV,GAAE,GAAAuB,OAAKH,KAAKZ,MAAME,SAElBc,eAAgB,kBAAMF,EAAKD,SAAS,CAAEZ,WAAW,MAEhDW,KAAKT,wBA7EQc,cCkBXC,EAjBA,SAAAjC,GAAK,OAEhBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,0BAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAgBH,EAAAC,EAAAC,cAAC+B,EAAD,CAAaT,MAAOzB,EAAMyB,MAAOC,SAAU1B,EAAM0B,aAEpFzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,UAAsCJ,EAAMyB,MAA5C,iBAAiEzB,EAAM0B,cCHxEO,SARA,kBAEXhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gGC8GOgC,6MA7GbpB,MAAQ,CACNqB,UACAX,MAAO,EACPC,SAAU,EACVT,QAAS,oDACToB,MAAK,KAWLC,YAAc,SAAAF,GAEV,OADiBA,EAAQG,KAAK,kBAAMC,KAAKC,SAAU,QAKvDC,UAAY,SAAAN,GACR,IAAMO,EAAeP,EAAQQ,IAAI,SAAAC,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,EAAV,CAAgBG,SAAS,MAM9D,OALI7B,EAAK8B,WACTC,aAAa/B,EAAK8B,WAIX9B,EAAKmB,YAAYK,MAI5BQ,YAAc,SAAAC,GACV,IAAIC,EAAWlC,EAAKJ,MAAMU,MAC1B4B,IACA,IAAIC,EAAcd,KAAKe,IAAIF,EAAUlC,EAAKJ,MAAMW,UAGhDP,EAAKS,SAAS,CACVQ,QAASjB,EAAKmB,YAAYc,GAC1B3B,MAAO4B,EACP3B,SAAU4B,OAKlBE,UAAY,SAAAJ,GACRjC,EAAKS,SAAS,CACVQ,QAASjB,EAAKuB,UAAUU,GACxB3B,MAAO,EACPY,MAAK,IAGTlB,EAAK8B,UAAYQ,WAAW,WAC5B9B,KAAKC,SAAS,CAACS,MAAM,KACnBqB,KAF0BZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAA3B,KAEd,GACdG,QAAQC,IAAIJ,EAAK8B,cAMrBW,cAAgB,SAAArD,GACZ,IAAIsD,GAAmB,EAEjBT,EAAUjC,EAAKJ,MAAMqB,QAAQQ,IAAI,SAAAC,GAOrC,OANIA,EAAKtC,KAAOA,IACTsC,EAAKG,UACRH,EAAKG,SAAU,EACfa,GAAmB,IAGhBhB,IAITgB,EAAmB1C,EAAKgC,YAAYC,GAAWjC,EAAKqC,UAAUJ,uFAlE9DzB,KAAKC,SAAS,CAAEQ,QAAST,KAAKW,YAAYX,KAAKZ,MAAMqB,4CA2ElD,IAAAP,EAAAF,KACP,OACE1B,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,CAAQtC,MAAOE,KAAKZ,MAAMU,MAAOC,SAAYC,KAAKZ,MAAMW,WACxDzB,EAAAC,EAAAC,cAAC6D,EAAD,MACA/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACduB,KAAKZ,MAAMqB,QAAQQ,IAAI,SAAAqB,GAAM,OAC5BhE,EAAAC,EAAAC,cAAA,OAAKC,UAAWyB,EAAKd,MAAMsB,KAAO,cAAgB,QAAS6B,IAAKD,EAAO1D,IACvEN,EAAAC,EAAAC,cAACgE,EAAD,CACE5D,GAAI0D,EAAO1D,GACXI,MAAOsD,EAAOtD,MACdL,YAAauB,EAAK+B,6BApGZ5B,mBCFlBoC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.926f4ac2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FriendCard(props) {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.handleClick(props.id)}>\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, {Component} from \"react\";\r\nimport \"./gameMessage.css\";\r\n\r\nclass GameMessage extends Component {\r\n\r\n    state = {\r\n        animating: false,\r\n        message: \"\"\r\n    }\r\n\r\n    // function runs on every state change\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"------\",prevProps)\r\n\r\n      // will be passed into setState function\r\n      let newState = {\r\n        animating: true\r\n      }\r\n\r\n      // deconstruct score and topScore from the pervious state\r\n      const {score, topScore} = prevProps\r\n\r\n      // change message if user guess correclty or incorrectly\r\n      if (score === 0 && topScore === 0) {\r\n        newState.message = \"\";\r\n      } else if (score !== 0 && topScore > 0) {\r\n        newState.message = \"correct\";\r\n      } else {\r\n        newState.message = \"incorrect\";\r\n      }\r\n\r\n      // set the state with the new message if the score changes, \r\n      // or the message and state message are not equal\r\n      if (score !== this.props.score || this.state.message !== newState.message) {\r\n        this.setState(newState);\r\n      }\r\n  \r\n    }\r\n\r\n    // change the display message based on the message state\r\n    renderMessage = () => {\r\n        switch (this.state.message) {\r\n        case \"correct\":\r\n          return \"You guessed correctly!\";\r\n        case \"incorrect\":\r\n          return \"You guessed incorrectly!\";\r\n        default:\r\n          return \"Click a character to begin!\";\r\n        }\r\n    };\r\n\r\n    // add animation class when animateClass state updates\r\n    // animations from aniamte.css library\r\n    // https://daneden.github.io/animate.css/\r\n    addAnimation = () => {\r\n      switch (this.state.message) {\r\n        case \"correct\":\r\n          return \"animated pulse\";\r\n        case \"incorrect\":\r\n          return \"animated wobble\";\r\n        default:\r\n          return \"\";\r\n        }     \r\n    }\r\n\r\n    render() {\r\n        return(\r\n          <h2 \r\n            // if the state.aniamtion = true, add the class from animate.css to trigger the animation,\r\n            // also add the state.message as a class, which changes the color,\r\n            // if aniamtion.state = false, remove the aniamte.css class and add the '.black' class\r\n            className={` \r\n              gameMessage \r\n              ${this.state.animating? this.addAnimation(): \"\"}  \r\n              ${this.state.animating? this.state.message: \"black\"}\r\n            `}\r\n            id={`${this.state.message}`}\r\n            // set the animation state back to false after the classes are added\r\n            onAnimationEnd={() => this.setState({ animating: false })} \r\n          >\r\n            {this.renderMessage()}\r\n          </h2>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default GameMessage;","import React from \"react\";\r\nimport \"./Navbar.css\";\r\nimport GameMessage from \"../Message\";\r\n\r\nconst Navbar = props => (\r\n    // console.log()\r\n    <div >\r\n        <nav className=\"navbar\">\r\n            <div className=\"col-sm text-center\">\r\n                <h1>Clicky Game</h1>\r\n            </div>\r\n            <div className=\"col-sm text-center\">\r\n                <div className=\"float-center \"><GameMessage score={props.score} topScore={props.topScore} /></div>\r\n            </div>\r\n            <div className=\"col-sm text-center\">\r\n                <div className=\"float-right \">Score: {props.score} | Top Score: {props.topScore}</div>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n)\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n// import GameMessage from \"../Message\";\r\n\r\nconst Navbar = () => (\r\n    // console.log()\r\n    <div className=\"header\">\r\n        <h1>Clicky Game!</h1>\r\n        <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n    </div>\r\n)\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\r\nimport GameCard from \"./components/GameCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Header from \"./components/Header\";\r\nimport friends from \"./friends.json\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.friends to the friends json array\r\n  state = {\r\n    friends,\r\n    score: 0,\r\n    topScore: 0,\r\n    message: \"Click as many images as you can without repeating\",\r\n    show:false\r\n  };\r\n  \r\n\r\n  componentDidMount() {\r\n        // reorders the dataarray on state changes\r\n        this.setState({ friends: this.shuffleDeck(this.state.friends) });\r\n        \r\n    }\r\n    \r\n    // shuffle the imported data array in random order\r\n    shuffleDeck = friends => {\r\n        let newFriends = friends.sort(() => Math.random() -0.5);\r\n        return newFriends;\r\n    };\r\n\r\n    // resets all the clicked properties to false\r\n    resetDeck = friends => {\r\n        const resetFriends = friends.map(item => ({ ...item, clicked: false }));\r\n        if (this.timeoutId) {\r\n        clearTimeout(this.timeoutId);\r\n    }\r\n        // console.log(friends);\r\n        // console.log(resetData);\r\n        return this.shuffleDeck(resetFriends);\r\n      };\r\n\r\n    // checks to see if score is higher than the topscore then updates the state with the new update data\r\n    correctPick = newData => {\r\n        let newScore = this.state.score;\r\n        newScore++\r\n        let newTopScore = Math.max(newScore, this.state.topScore);\r\n        \r\n\r\n        this.setState({\r\n            friends: this.shuffleDeck(newData),\r\n            score: newScore,\r\n            topScore: newTopScore,\r\n        })\r\n    }\r\n\r\n    // restarts the game with fresh data\r\n    wrongPick = newData => {\r\n        this.setState({\r\n            friends: this.resetDeck(newData),\r\n            score: 0,\r\n            show:false\r\n            \r\n        });\r\n        this.timeoutId = setTimeout(function () {\r\n        this.setState({show: true});\r\n        }.bind(this), 0);\r\n        console.log(this.timeoutId)\r\n        \r\n    }\r\n\r\n    // when a card is clicked, check if it has been clicked before,\r\n    // then update that cards clicked property\r\n    gameCardClick = id => {\r\n        let guessedCorrectly = false;\r\n        // newData will be the data array with updated clicked properties\r\n        const newData = this.state.friends.map(item => {\r\n          if (item.id === id) {\r\n            if (!item.clicked) {\r\n              item.clicked = true;\r\n              guessedCorrectly = true;\r\n            }\r\n          }\r\n          return item;     \r\n        });\r\n        // if guessedCorrectly = true, run the correctGuess function,\r\n        // else run the wrongGuess function\r\n        guessedCorrectly ? this.correctPick(newData) : this.wrongPick(newData);\r\n      };\r\n\r\n\r\n\r\n\r\n \r\n\r\n  // Map over this.state.friends and render a FriendCard component for each friend object\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Navbar score={this.state.score} topScore = {this.state.topScore}></Navbar>\r\n        <Header />\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n        {this.state.friends.map(friend => (\r\n          <div className={this.state.show ? 'shake col-3' : 'col-3'} key={friend.id}>\r\n          <GameCard\r\n            id={friend.id}\r\n            image={friend.image}\r\n            handleClick={this.gameCardClick}\r\n          />\r\n          </div>\r\n        ))}\r\n        </div>\r\n        </div>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}